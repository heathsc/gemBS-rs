name: gemBS
author: Simon Heath <simon.heath@gmail.com>
about: gemBS is a bioinformatics pipeline for analyzing whole genome bisulfite data (WGBS) data
setting: GlobalVersion
setting: DeriveDisplayOrder
setting: SubcommandRequiredElseHelp
args:
    - quiet: {short: q, long: quiet, help: Silence all output}
    - timestamp: {short: t, help: Prepend log entries with a timestamp, takes_value: true, value_name: GRANULARITY, possible_values: [none, sec, ms, us, ns]}
    - loglevel: {short: l, long: loglevel, takes_value: true, value_name: LOGLEVEL, possible_values: [none, error, warn, info, debug, trace], case_insensitive: true, help: Set log level}
    - config_file: {short: c, long: config-file, takes_value: true, value_name: CONFIG_FILE, help: Location of gemBS config file}
    - dir: {short: d, long: dir, takes_value: true, value_name: DIR, help: set working directory}
    - gembs_root: {short :r, long: gembs-root, takes_value: true, value_name: DIR, help: set root of gemBS installation}
    - all: {short: a, long: all, help: Consider all tasks required for the requested command}
    - dry_run: {short: d, long: dry-run, help: Output pending commands without execution}
    - json: {short: j, long: json, value_name: JSON_FILE, takes_value: true, help: Output JSON file with details of pending commands}
    - ignore_times: {short: i, long: ignore-times, help: Ignore file modification times when evaluating the status of tasks}
    - ignore_status: {short: I, long: ignore-status, help: Ignore status of tasks when compiling task list}
    - keep_logs: {short: k, long: keep-logs, help: Don't remove log files after successful completion of task} 
subcommands:
    - prepare:
        setting: DeriveDisplayOrder
        about: Prepare gemBS analysis
        args:
           - config: {short: c, long: config, value_name: CONFIG, help: Text config file with gemBS parameters, takes_value: true, required: true}
           - cvs_metadata: {short: t, long: text-metadata, value_name: TEXT_METADATA, help: Sample data in csv format, takes_value: true}
           - json_metadata: {short: l, long: lims-cnag-json, value_name: JSON_METADATA, help: Use JSON metadata file from CNAG lims, takes_value: true}
           - populate: {short: p, long: populate-cache, help: Populate reference cache if required (for CRAM)}
        groups:
           - metadata:
              args: [cvs_metadata, json_metadata]
              required: true
    - index:
        setting: DeriveDisplayOrder
        about: Prepare genome indexes
        args:
          - threads: {short: t, long: threads, value_name: THREADS, takes_value: true, help: Number of threads (default - all available cores)}
          - cores: {short: c, long: cores, value_name: CORES, takes_value: true, help: Number of cores for a job (default - all available cores)}
          - memory: {short: m, long: memory, value_name: MEMORY, takes_value: true, help: Memory required for a job (default - all available memory)}
          - time: {short: T, long: time, value_name: TIME, takes_value: true, help: Time required for a job}
          - sampling: {short: s, long: sampling-rate, value_name: SAMPLING_RATE, takes_value: true, help: Text sampling rate - increasing will decrease index size but also performance}
          - min_contig_size: {short: M, long: min-contig-size, value_name: MIN_CONTIG_SIZE, takes_value: true, help: Contigs smaller than this will be filtered out during index generation}
          - make_bs_index: {short: b, long: bs-index, help: Generate bisulfite index}
          - make_nonbs_index: {short: n, long: nonbs-index, help: Generate non-bisulfite (regular) index}
          - make_dbsnp_index: {short: D, long: dbsnp-index, help: Generate dbSNP index}
          - dbsnp_jobs: {short: j, long: dbsnp-jobs, value_name: JOBS, takes_value: true, help: Number of parallel read jobs for dbsnp_index}
          - dbsnp_files: {short: d, long: dbsnp-files, value_name: FILES, multiple: true, takes_value: true, help: List of input files from dbSNP}
          - dbsnp_selected: {short: S, long: dbsnp-selected, value_name: FILE, takes_value: true, help: File with list of selected SNPs from dbSNP}
          - dbsnp_type: {long: dbsnp-type, value_name: DBSNP_TYPE, takes_value: true,  possible_values: [AUTO, BED, JSON, VCF], case_insensitive: true, help: Type of dbSNP input files}
          - dbsnp_chrom_alias: {long: dbsnp-chrom-alias, value_name: FILE, takes_value: true, help: Chromosome alias}
    - map:
        setting: DeriveDisplayOrder
        about: Read mapping
        args:
          - dataset: {short: D, long: dataset, value_name: DATASET, takes_value: true, multiple: true, help: Dataset to be mapped}
          - sample: {short: n, long: sample, value_name: SAMPLE, takes_value: true, multiple: true, help: Name of sample to be mapped}
          - barcode: {short: b, long: barcode, value_name: BARCODE, takes_value: true, multiple: true, help: Barcode of sample to be mapped}
          - cores: {short: c, long: cores, value_name: CORES, takes_value: true, help: Number of cores for a job (default - all available cores)}
          - memory: {short: m, long: memory, value_name: MEMORY, takes_value: true, help: Memory required for a job (default - all available memory)}
          - time: {short: T, long: time, value_name: TIME, takes_value: true, help: Time required for a job}
          - tmp_dir: {short: d, long: tmp-dir, value_name: PATH, takes_value: true, help: Temporary directory to perform sorting operations}
          - threads: {short: t, long: threads, value_name: THREADS, takes_value: true, help: Number of threads for mapping pipeline}
          - map_threads: {long: map-threads, value_name: THREADS, takes_value: true, conflicts_with: threads, help: Number of threads for GEM3 mapper}
          - sort_threads: {long: sort-threads, value_name: THREADS, takes_value: true, conflicts_with: threads, help: Number of threads for sorting}
          - sort_memory: {long: sort-memory, value_name: MEMORY, takes_value: true, help: Amount of memory per sort thread}
          - merge_threads: {long: merge-threads, value_name: THREADS, takes_value: true, conflicts_with: threads, help: Number of threads for merging}
          - file_type: {short: F, long: type, value_name: FILE_TYPE, takes_value: true, possible_values: [PAIRED, SINGLE, INTERLEAVED, STREAM, BAM], help: Type of data file}
          - paired: {short: p, long: paired-end, help: Input data is paired end}
          - remove: {short: r, long: remove, help: Remove individual BAMs after merging}
          - reverse: {short: R, long: reverse-conversion, help: Assume G2A conversion on read 1 and C2T on read 2}
          - non_stranded: {short: s, long: read-non-stranded, help: Treat library as non-stranded}
          - underconv_seq: {short: u, long: underconversion-sequence, value_name: SEQUENCE_NAME, takes_value: true, help: Name of underconversion sequencing control}
          - overconv_seq: {short: v, long: overconversion-sequence, value_name: SEQUENCE_NAME, takes_value: true, help: Name of overconversion sequencing control}
          - non_bs: {long: non-bs, help: Map as regular (non-bisulfite) data}
          - bs: {long: bs, help: Map as bisulfite data}
          - md5: {long: md5, help: Perform calcuation of md5 sums only}
          - no_md5: {long: no-md5, help: Do not automatically calculate md5 sums}
          - merge: {long: merge, help: Perform merge BAM step only}
          - no_merge: {long: no-merge, help: Do not automatically merge BAMs}
          - benchmark_mode: {long: benchmark-mode, help: Omit dates etc. from output to make comparison simpler}
        groups:
           - sample_desc:
              args: [dataset, sample, barcode]
           - merging:
              args: [merge, no_merge, md5] 
           - md5sum:
              args: [md5, no_md5]
           - md5sum_a:
              args: [md5, dataset]
    - call:
        setting: DeriveDisplayOrder
        about: Methylation and SNP calling
        args:
          - sample: {short: n, long: sample, value_name: SAMPLE, takes_value: true, multiple: true, help: Name of sample}
          - barcode: {short: b, long: barcode, value_name: BARCODE, takes_value: true, multiple: true, help: Barcode of sample}
          - mapq_threshold: {short: q, long: mapq-threshold, value_name: MAPQ_THRESHOLD, takes_value: true, help: Threshold for MAPQ scores}
          - qual_threshold: {short: Q, long: qual-threshold, value_name: QUAL_THRESHOLD, takes_value: true, help: Threshold for base quality scores}
          - right_trim: {short: g, long: right-trim, takes_value: true, multiple: true, min_values: 1, max_values: 2, require_delimiter: true, value_name: "BASES [,BASES]", help: Bases to trim from right of read pair (give 2 values for read specific values) }
          - left_trim: {short: f, long: left-trim, takes_value: true, multiple: true, min_values: 1, max_values: 2, require_delimiter: true, value_name: "BASES, [,BASES]", help: Bases to trim from left of read pair (give 2 values for read specific values) }
          - max_template_length: {short: L, long: max-template-length, takes_value: true, value_name: "LENGTH", help: Maximum template length for paired reads }
          - tmp_dir: {short: d, long: tmp-dir, value_name: PATH, takes_value: true, help: Temporary directory to perform sorting operations}
          - threads: {short: t, long: threads, value_name: THREADS, takes_value: true, help: Number of threads for calling pipeline}
          - call_threads: {long: call-threads, value_name: THREADS, takes_value: true, conflicts_with: threads, help: Number of threads for methylation caller}
          - merge_threads: {long: merge-threads, value_name: THREADS, takes_value: true, conflicts_with: threads, help: Number of threads for merging}
          - jobs: {short: j, long: jobs, value_name: JOBS, takes_value: true, help: Number of parallel jobs}
          - cores: {short: c, long: cores, value_name: CORES, takes_value: true, help: Number of cores for a job (default - available cores / jobs)}
          - time: {short: T, long: time, value_name: TIME, takes_value: true, help: Time required for a job}
          - memory: {short: m, long: memory, value_name: MEMORY, takes_value: true, help: Memory required for a job (default - available memory / jobs)}
          - keep_duplicates: {short: u, long: keep-duplicates, help: Do not merge duplicate reads}
          - ignore_duplicate_flag: {short: U, long: ignore-duplicate-flag, help: Ignore duplicate flag from SAM/BAM files}
          - keep_unmatched: {short: k, long: keep-unmatched, help: Do not discard reads that do not form proper pairs}
          - species: {short: e, long: species, value_name: SPECIES, takes_value: true, help: Species name}
          - remove: {short: r, long: remove, help: Remove individual BAMs after merging}
          - md5: {long: md5, help: Perform calculation of md5 sums only}
          - no_md5: {long: no-md5, help: Do not automatically calculate md5 sums}
          - index: {long: index, help: Perform indexing of final BCF only}
          - dbsnp_index: {short: D, long: dbsnp-index, value_name: FILE, help: dbSNP processed index file}
          - no_index: {long: no-index, help: Do not automatically calculate index of final BCF}
          - haploid: {short: '1', long: haploid, help: Force genotype calls to be haploid}
          - conversion: {short: C, long: conversion, value_name: "UNDER OVER", takes_value: true, multiple: true, number_of_values: 2, help: "set conversion rates (under over)"}          
          - auto_conversion: {long: auto-conversion, help: Try to calculate conversion rates from data}          
          - ref_bias: {short: R, long: reference-bias, value_name: BIAS, takes_value: true, help: set bias to reference homozygote}          
          - pool: {long: pool, value_name: POOL, takes_value: true, multiple: true, help: Contig pool for methylation calling}                   
          - merge: {long: merge, help: Perform merge BCF step only}
          - no_merge: {long: no-merge, help: Do not automatically merge BAMs}
          - benchmark_mode: {long: benchmark_mode, help: Omit dates etc. from output to make comparison simpler}        
        groups:
           - sample_desc:
              args: [sample, barcode]
           - merge_index:
              args: [merge, no_merge, index, md5]
           - indexing:
              args: [index, no_index]
           - md5sums:
              args: [md5, no_md5]
           - com_groups:
              args: [merge, index, md5]
    - extract:
        setting: DeriveDisplayOrder
        about: Produce methylation and SNP summary files
        args:
          - sample: {short: n, long: sample, value_name: SAMPLE, takes_value: true, multiple: true, help: Name of sample}
          - barcode: {short: b, long: barcode, value_name: BARCODE, takes_value: true, multiple: true, help: Barcode of sample}
          - threads: {short: t, long: threads, value_name: THREADS, takes_value: true, help: Number of threads for extraction pipeline}
          - jobs: {short: j, long: jobs, value_name: JOBS, takes_value: true, help: Number of parallel jobs}
          - cores: {short: c, long: cores, value_name: CORES, takes_value: true, help: Number of cores for a job (default - available cores / jobs)}
          - time: {short: T, long: time, value_name: TIME, takes_value: true, help: Time required for a job}
          - memory: {short: m, long: memory, value_name: MEMORY, takes_value: true, help: Memory required for a job (default - available memory / jobs)}
          - strand_specific: {short:s, long: strand-specific, help: Output separate lines in CpG file for each strand}
          - bigwig_strand_specific: {short:W, long: bigwig-strand-specific, help: Output separate bigWig files for each strand}
          - qual_threshold: {short: Q, long: qual-threshold, value_name: QUAL_THRESHOLD, takes_value: true, help: Threshold for base quality scores}
          - phred_threshold: {short: q, long: phred_threshold, value_name: PHRED, takes_value: true, help: Minimum threshold for genotype PHRED score}
          - min_inform: {short: I, long: min-inform, value_name: N, takes_value: true, help: Minimum threshold for informative reads}
          - min_nc: {short: M, long: min-nc, value_name: N, takes_value: true, help: Minimum number of non-converted reads for non-CpG sites}
          - allow_het: {short:H, long: allow-het, help: Allow both homozygous and heterozygous sites}
          - ref_bias: {short: R, long: reference_bias, value_name: BIAS, takes_value: true, help: set bias to reference homozygote}          
          - cpg: {short:C, long: cpg, help: Output gemBS bed with CpG sites}
          - non_cpg: {short:N, long: non-cpg, help: Output gemBS bed with non-CpG sites}
          - bed_methyl: {short:B, long: bed-methyl, help: "Output ENCODE standard output (bedMethyl, bigBed and bigWig)"}
          - snps: {short:S, long: snps, help: Output SNPs}
          - no_md5: {long: no-md5, help: Do not automatically calculate md5 sums}
          - snp_list: {long: snp-list, value_name: SNP_LIST, takes_value: true, help: Path to file with list of SNPs to output}          
          - snp_db: {long: snp-db, value_name: SNP_DB, takes_value: true, help: Path to dbSNP_idx processed SNP database file}          
        groups:
          - sample_desc:
             args: [sample, barcode] 
    - report:
        setting: DeriveDisplayOrder
        about: Generate QC report
        args:
          - project: {short: p, long: project, value_name: NAME, takes_value: true, help: Output title for report (project name)}
          - report_dir: {short: r, long: report-dir, value_name: PATH, takes_value: true, help: Root directory for reports}
          - paper_size: {short: S, long: paper-size, help: Select paper size for latex versions of report, takes_value: true, value_name: PAPER_SIZE, possible_values: [a4, letter], case_insensitive: true}
          - pdf: {short: P, long: pdf, help: Generate pdf version of QC report (requires latexmk and pdflatex)}
          - threads: {short: t, long: threads, value_name: THREADS, takes_value: true, help: Number of threads for extraction pipeline}
          - cores: {short: c, long: cores, value_name: CORES, takes_value: true, help: Number of cores for a job (default - available cores / jobs)}
          - mapping: {short: M, long: mapping, help: Generate mapping report, conflicts_with: pdf}
          - calling: {short: C, long: calling, help: Generate calling report, conflicts_with: pdf}
          - time: {short: T, long: time, value_name: TIME, takes_value: true, help: Time required for a job}
          - memory: {short: m, long: memory, value_name: MEMORY, takes_value: true, help: Memory required for a job (default - available memory / jobs)}
    - run:
        about: Run all pending pipeline commands
    - completions: 
        about: Generate shell completion files
        args:
          - shell: {short: s, long: shell, help: Destination shell for completion file, takes_value: true, value_name: SHELL, possible_values: [bash, zsh, fish, elvish], case_insensitive: true }
          - output: {short: o, long: output, help: Output file, takes_value: true, value_name: FILE}
    - clear:
        setting: DeriveDisplayOrder
        about: Clear up incomplete files after aborted run
        args:
          - confirm: {short:y, long: yes, help: Do not ask for confirmation}
          - force: {short:f, long: force, help: Continue even if lock file found}
